// A "SPIKE" is a fuzzed messages that can be sent to a
// network service to (hopefully) induce errors.

// There is not support to create multiple separate SPIKES
// using one single script. If you have multiple different
// message types with fixed data that you want to fuzz, such
// as the strings that represent our various supported commands
// such as CONNECT, CONNACK, DISCONNECT, etc, you therefore
// need to use individual SPIKE scripts that specify this data
// using constructs such as the s_string command.

// ========================================================
// 3.1. CONNECT
// ========================================================

printf("Sending CONNECT\n");

// --------------------------------------------------------
// Fixed header
// --------------------------------------------------------
// byte 1 | Message Type  | DUP flag | QoS level | RETAIN |
//        | 0 | 0 | 0 | 1 |     x    |  x  |  x  |    x   |
s_binary("10");

// byte 2 | Remaining Length
s_binary_block_size_byte("variable_header_payload"); // TODO s_binary_block_size_byte_variable("variable_header_payload");

s_block_start("variable_header_payload");

// --------------------------------------------------------
// Variable header
// --------------------------------------------------------
// byte 1 | Protocol Name Length MSB
// byte 2 | Protocol Name Length LSB
s_binary_block_size_halfword_bigendian("protocol_name");

// bytes 3-6 | Protocol Name
s_block_start("protocol_name");
s_string_variable("MQTT"); // TODO s_string("MQTT");
s_block_end("protocol_name");

// byte 7 | Protocol Version Number
s_binary("04");

// byte 8 | Connect Flags
s_binary("02");

// byte 10 | Keep Alive timer MSB
s_binary("00");

// byte 11 | Keep Alive timer LSB
s_binary("0a");

// --------------------------------------------------------
// Payload
// --------------------------------------------------------
// byte 1 | Client Identifier Length MSB
// byte 2 | Client Identifier Length LSB
s_binary_block_size_halfword_bigendian("client_identifier");

// bytes 3-n | Client Identifier
s_block_start("client_identifier");
s_string_variable("client"); // TODO  s_string("client");
s_block_end("client_identifier");

s_block_end("variable_header_payload");

// ========================================================
// 3.2. CONNACK
// ========================================================

printf("Receiving CONNACK\n");

// TODO Read the CONNACK before sending the DISCONNECT
//      Otherwise the DISCONNECT is sent in the same packet as CONNECT
s_read_packet();

